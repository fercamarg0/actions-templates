name: Reusable Auto PR

on:
  workflow_call:
    inputs:
      base-branch:
        description: "Base branch (target)"
        required: false
        default: "main"
        type: string
      head-branch:
        description: "Head branch (source); defaults to current ref"
        required: false
        type: string
      draft:
        description: "Create PR as draft"
        required: false
        default: false
        type: boolean
      title:
        description: "Optional PR title override"
        required: false
        type: string
      body:
        description: "Optional PR body override"
        required: false
        type: string

jobs:
  create-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Create PR if missing
        uses: actions/github-script@v7
        with:
          script: |
            const base = `${{ inputs.base-branch }}` || 'main'
            let head = `${{ inputs.head-branch }}`
            if (!head) head = context.ref.replace('refs/heads/', '')
            const owner = context.repo.owner
            const repo = context.repo.repo

            // Check existing PR
            const { data: prs } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head: `${owner}:${head}`,
              base
            })
            if (prs.length > 0) {
              core.info(`PR já existe para ${head}: ${prs[0].html_url}`)
              return
            }

            // Title/body
            let title = `${{ inputs.title }}`
            let body = `${{ inputs.body }}`
            if (!title) {
              const { data: commits } = await github.rest.repos.listCommits({ owner, repo, sha: head, per_page: 1 })
              title = commits[0]?.commit?.message?.split('\n')[0] || `Auto PR: ${head}`
            }
            if (!body) {
              body = `PR automático gerado pelo workflow para a branch \`${head}\`.`
            }

            const { data: pr } = await github.rest.pulls.create({
              owner,
              repo,
              title,
              head,
              base,
              body,
              maintainer_can_modify: true,
              draft: ${{ inputs.draft }}
            })
            core.info(`PR criado: ${pr.html_url}`)
